
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programrightEQUALSleftPLUSMINUSleftMULTIPLYDIVIDEMODrightEXPONENTrightUMINUSUPLUSDIVIDE EQUALS EXPONENT ID INT_LITERAL LPAREN MINUS MOD MULTIPLY PLUS RPAREN SEMICOLONprogram : statement_list semicolon_optsemicolon_opt : epsilon\n                   | SEMICOLONstatement : expressionstatement_list : statement_list SEMICOLON statementstatement_list : statementidentifier : IDexpression : expression PLUS expression\n                | identifier EQUALS expression\n\t\t| expression MINUS expression\n\t\t| expression DIVIDE expression\n\t\t| expression MULTIPLY expression\n\t\t| expression MOD expression\n\t\t| expression EXPONENT expressionexpression : MINUS expression %prec UMINUS\n\t\t| PLUS expression %prec UPLUSexpression : LPAREN expression RPARENexpression : INT_LITERALexpression : identifierepsilon :'
    
_lr_action_items = {'MINUS':([0,4,5,6,7,8,9,10,12,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,],[7,15,7,-19,7,7,-18,-7,7,7,7,7,7,7,7,-16,7,-15,15,-8,-10,-11,-12,-13,-14,15,-17,]),'PLUS':([0,4,5,6,7,8,9,10,12,14,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,],[5,14,5,-19,5,5,-18,-7,5,5,5,5,5,5,5,-16,5,-15,14,-8,-10,-11,-12,-13,-14,14,-17,]),'LPAREN':([0,5,7,8,12,14,15,16,17,18,19,21,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'INT_LITERAL':([0,5,7,8,12,14,15,16,17,18,19,21,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'ID':([0,5,7,8,12,14,15,16,17,18,19,21,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'$end':([1,2,3,4,6,9,10,11,12,13,20,22,24,25,26,27,28,29,30,31,32,],[0,-20,-6,-4,-19,-18,-7,-1,-3,-2,-16,-15,-5,-8,-10,-11,-12,-13,-14,-9,-17,]),'SEMICOLON':([2,3,4,6,9,10,20,22,24,25,26,27,28,29,30,31,32,],[12,-6,-4,-19,-18,-7,-16,-15,-5,-8,-10,-11,-12,-13,-14,-9,-17,]),'DIVIDE':([4,6,9,10,20,22,23,25,26,27,28,29,30,31,32,],[16,-19,-18,-7,-16,-15,16,16,16,-11,-12,-13,-14,16,-17,]),'MULTIPLY':([4,6,9,10,20,22,23,25,26,27,28,29,30,31,32,],[17,-19,-18,-7,-16,-15,17,17,17,-11,-12,-13,-14,17,-17,]),'MOD':([4,6,9,10,20,22,23,25,26,27,28,29,30,31,32,],[18,-19,-18,-7,-16,-15,18,18,18,-11,-12,-13,-14,18,-17,]),'EXPONENT':([4,6,9,10,20,22,23,25,26,27,28,29,30,31,32,],[19,-19,-18,-7,-16,-15,19,19,19,19,19,19,19,19,-17,]),'EQUALS':([6,10,],[21,-7,]),'RPAREN':([6,9,10,20,22,23,25,26,27,28,29,30,31,32,],[-19,-18,-7,-16,-15,32,-8,-10,-11,-12,-13,-14,-9,-17,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,],[2,]),'statement':([0,12,],[3,24,]),'expression':([0,5,7,8,12,14,15,16,17,18,19,21,],[4,20,22,23,4,25,26,27,28,29,30,31,]),'identifier':([0,5,7,8,12,14,15,16,17,18,19,21,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'semicolon_opt':([2,],[11,]),'epsilon':([2,],[13,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list semicolon_opt','program',2,'p_program','miniFrontEnd.py',99),
  ('semicolon_opt -> epsilon','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',103),
  ('semicolon_opt -> SEMICOLON','semicolon_opt',1,'p_semicolon_opt','miniFrontEnd.py',104),
  ('statement -> expression','statement',1,'p_statement_expr','miniFrontEnd.py',111),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statement_list_A','miniFrontEnd.py',116),
  ('statement_list -> statement','statement_list',1,'p_statement_list_B','miniFrontEnd.py',121),
  ('identifier -> ID','identifier',1,'p_identifier','miniFrontEnd.py',128),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',136),
  ('expression -> identifier EQUALS expression','expression',3,'p_expression_binop','miniFrontEnd.py',137),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','miniFrontEnd.py',138),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','miniFrontEnd.py',139),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','miniFrontEnd.py',140),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','miniFrontEnd.py',141),
  ('expression -> expression EXPONENT expression','expression',3,'p_expression_binop','miniFrontEnd.py',142),
  ('expression -> MINUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',147),
  ('expression -> PLUS expression','expression',2,'p_expression_unop','miniFrontEnd.py',148),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','miniFrontEnd.py',153),
  ('expression -> INT_LITERAL','expression',1,'p_expression_int_literal','miniFrontEnd.py',158),
  ('expression -> identifier','expression',1,'p_expression_id','miniFrontEnd.py',163),
  ('epsilon -> <empty>','epsilon',0,'p_epsilon','miniFrontEnd.py',171),
]
